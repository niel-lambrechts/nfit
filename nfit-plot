#!/usr/bin/env python3
import matplotlib.pyplot as plt
import numpy as np
import os
import configparser # For reading INI-style config files
import argparse     # For more robust command-line argument parsing

# --- Script Version ---
SCRIPT_VERSION = "1.25.144.0" # Align with nfit/nfit-profile if desired

# --- Default Configuration File Names ---
DEFAULT_FRAME_CONFIG_FILENAME = "nfit.mgsys.cfg"
DEFAULT_SCENARIO_CONFIG_FILENAME = "nfit.scenarios.cfg"

# --- Module-level Default for DC_NAME ---
# This is the ultimate fallback if not found in the mgsys config file.
DC_NAME = "Default Data Centre" # Ensures DC_NAME is always defined

# --- Helper Function to Find Config File ---
def find_config_file(default_filename, specified_path=None):
    """
    Finds a configuration file.
    1. Uses specified_path if provided and it exists.
    2. Checks in ./etc/default_filename relative to script.
    3. Checks in ./default_filename relative to script.
    Returns the found path or the specified_path (even if not found, for error reporting).
    Returns None if no path specified and not found in default locations.
    """
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    if specified_path:
        if os.path.exists(specified_path) and os.path.isfile(specified_path):
            return specified_path
        else:
            # Return the specified path so the caller can report "specified path not found"
            return specified_path 
            
    # Default search order
    paths_to_check = [
        os.path.join(script_dir, "etc", default_filename),
        os.path.join(script_dir, default_filename)
    ]

    for path in paths_to_check:
        if os.path.exists(path) and os.path.isfile(path):
            return path
    
    return None # Indicate not found in default locations

# --- Function to Load Frame Configuration & Global Settings ---
def load_frames_config(config_filepath):
    """
    Loads frame configurations and global DC_NAME from an INI-style config file.
    The [GLOBAL] section with 'dc_name' key should be in this file.
    """
    global DC_NAME # Declare intent to potentially modify the global DC_NAME

    if not os.path.exists(config_filepath):
        print(f"ERROR: Frame configuration file not found: {config_filepath}")
        print(f"Please create '{DEFAULT_FRAME_CONFIG_FILENAME}' in the script's directory or './etc/' subdirectory, or specify path with --mgsys-config.")
        exit(1)

    config = configparser.ConfigParser(interpolation=None)
    try:
        config.read(config_filepath)
    except configparser.Error as e:
        print(f"Error parsing frame configuration file '{config_filepath}': {e}")
        exit(1)

    # Load Global Settings
    if config.has_section('GLOBAL') and config.has_option('GLOBAL', 'dc_name'):
        DC_NAME = config.get('GLOBAL', 'dc_name')
        print(f"Loaded DC_NAME='{DC_NAME}' from [GLOBAL] section in '{config_filepath}'.")
    else:
        print(f"Warning: [GLOBAL] section with 'dc_name' key not found in '{config_filepath}'.")
        print(f"Using DC_NAME: '{DC_NAME}' (default or previously set).")

    frames_config_list = []
    # Filter out 'GLOBAL' section from frame processing explicitly
    frame_sections = [s for s in config.sections() if s.upper() != 'GLOBAL']

    if not frame_sections:
        print(f"ERROR: Frame configuration file '{config_filepath}' has no frame definition sections (e.g., [Frame 1]).")
        exit(1)

    for section_name in frame_sections:
        try:
            frame_name = config.get(section_name, 'name', fallback=section_name)
            total_cores = config.getint(section_name, 'total_cores')
            vio_allocation = config.getfloat(section_name, 'vio_allocation')
            frames_config_list.append({
                "name": frame_name,
                "total_cores": total_cores,
                "vio_allocation": vio_allocation
            })
        except (configparser.NoOptionError, ValueError) as e:
            print(f"Error in frame section '{section_name}' of '{config_filepath}': {e}. Ensure 'name', 'total_cores', and 'vio_allocation' are present and valid.")
            exit(1)
            
    if not frames_config_list:
        print(f"ERROR: No valid frame configurations loaded from '{config_filepath}'.")
        exit(1)
        
    print(f"Successfully loaded {len(frames_config_list)} frame configurations from '{config_filepath}'.")
    return frames_config_list

# --- Function to Load Scenario Definitions ---
def load_scenarios_config(config_filepath, num_expected_frames):
    """
    Loads scenario definitions from an INI-style config file.
    'lpar_entitlements_per_frame' should be a comma-separated list of floats.
    Skips any section named [GLOBAL].
    """
    if not os.path.exists(config_filepath):
        print(f"ERROR: Scenario configuration file not found: {config_filepath}")
        print(f"Please create '{DEFAULT_SCENARIO_CONFIG_FILENAME}' in the script's directory or './etc/' subdirectory, or specify path with --scenarios-config.")
        exit(1)

    config = configparser.ConfigParser(interpolation=None)
    try:
        config.read(config_filepath)
    except configparser.Error as e:
        print(f"Error parsing scenario configuration file '{config_filepath}': {e}")
        exit(1)

    scenarios_list = []
    scenario_sections = [s for s in config.sections() if s.upper() != 'GLOBAL'] # Explicitly skip GLOBAL

    if not scenario_sections:
        print(f"ERROR: Scenario configuration file '{config_filepath}' has no scenario definition sections.")
        exit(1)

    for section_name in scenario_sections: # Each section is a scenario
        try:
            scenario_name = config.get(section_name, 'name', fallback=section_name)
            entitlements_str = config.get(section_name, 'lpar_entitlements_per_frame')
            filename_suffix = config.get(section_name, 'filename_suffix')
            
            # Parse comma-separated entitlements into a list of floats
            lpar_entitlements = [float(x.strip()) for x in entitlements_str.split(',')]

            if len(lpar_entitlements) != num_expected_frames:
                print(f"ERROR in scenario '{scenario_name}' from '{config_filepath}':")
                print(f"  Number of LPAR entitlements ({len(lpar_entitlements)}) does not match number of frames ({num_expected_frames}).")
                exit(1)

            scenarios_list.append({
                "name": scenario_name,
                "lpar_entitlements_per_frame": lpar_entitlements,
                "filename_suffix": filename_suffix
            })
        except (configparser.NoOptionError, ValueError) as e:
            print(f"Error in scenario section '{section_name}' of '{config_filepath}': {e}. Ensure 'name', 'lpar_entitlements_per_frame', 'filename_suffix' are present and valid.")
            exit(1)
            
    if not scenarios_list:
        print(f"ERROR: No valid scenarios loaded from '{config_filepath}'.")
        exit(1)

    print(f"Successfully loaded {len(scenarios_list)} scenarios from '{config_filepath}'.")
    return scenarios_list

# --- Charting Function ---
def create_capacity_chart(
    chart_title_prefix, entity_name, entity_total_cores, entity_vio_allocation,
    entity_lpar_entitlement, reserve_target_for_entity_headroom,
    reserve_target_label_value, output_filename="capacity_chart.png",
    is_dc_summary=True, current_scenario_name_for_title="Scenario",
    num_dc_frames=1, total_dc_capacity_val=0
):
    """
    Generates a stacked bar chart for DC-wide or per-frame capacity scenario.
    """
    labels = [entity_name]
    title_entity_name = DC_NAME if is_dc_summary else entity_name

    if is_dc_summary:
        labels = [f"{title_entity_name}\n({num_dc_frames} Frames, {total_dc_capacity_val:.2f} Total Cores)"]

    vio_data = np.array([entity_vio_allocation])
    lpar_entitlement_data = np.array([entity_lpar_entitlement])

    total_allocated_active = vio_data[0] + lpar_entitlement_data[0]
    actual_headroom = entity_total_cores - total_allocated_active

    if total_allocated_active > entity_total_cores:
        print(f"WARNING for {chart_title_prefix} - {entity_name}: Total allocated ({total_allocated_active:.2f}) exceeds capacity ({entity_total_cores:.2f})!")
        lpar_entitlement_data = np.array([max(0, entity_total_cores - vio_data[0])])
        actual_headroom = 0
        total_allocated_active = entity_total_cores

    reserve_in_headroom = 0
    surplus_headroom = 0
    if actual_headroom > 0:
        if actual_headroom >= reserve_target_for_entity_headroom:
            reserve_in_headroom = reserve_target_for_entity_headroom
            surplus_headroom = actual_headroom - reserve_target_for_entity_headroom
        else:
            reserve_in_headroom = actual_headroom
            surplus_headroom = 0
    
    reserve_data_to_plot = np.array([reserve_in_headroom])
    surplus_data_to_plot = np.array([surplus_headroom])

    fig, ax = plt.subplots(figsize=(12, 8))
    bar_width = 0.4
    index = np.arange(len(labels))

    p1 = ax.bar(index, vio_data, bar_width, label=f'VIO Servers ({vio_data[0]:.2f})', color='#FFDA63')
    base_lpar = vio_data
    p2 = ax.bar(index, lpar_entitlement_data, bar_width, bottom=base_lpar, label=f'LPAR Entitlements ({lpar_entitlement_data[0]:.2f})', color='#D9534F')
    
    base_reserve = base_lpar + lpar_entitlement_data
    p_reserve = None
    if reserve_in_headroom > 0.001 : 
        p_reserve = ax.bar(index, reserve_data_to_plot, bar_width, bottom=base_reserve, label=f'Evacuation Reserve ({reserve_data_to_plot[0]:.2f})', color='#A0D2DB')

    base_surplus = base_reserve + reserve_data_to_plot
    p_surplus = None
    if surplus_headroom > 0.001: 
        p_surplus = ax.bar(index, surplus_data_to_plot, bar_width, bottom=base_surplus, label=f'True Surplus Headroom ({surplus_data_to_plot[0]:.2f})', color='#5CB85C')

    ax.axhline(entity_total_cores, color='black', linestyle='-', linewidth=2, label=f'Total Capacity ({entity_total_cores:.2f} Cores)')

    ax.set_ylabel('CPU Cores', fontsize=13)
    plt.suptitle(f'{chart_title_prefix}: {current_scenario_name_for_title}', fontsize=17, fontweight='bold') 
    ax.set_title(f'{title_entity_name} (Total Cores: {entity_total_cores:.2f})' if not is_dc_summary else f'{DC_NAME} ({num_dc_frames} Frames, {total_dc_capacity_val:.2f} Total Cores)', fontsize=13, y=1.0, pad=-25)

    ax.set_xticks(index)
    ax.set_xticklabels(labels, fontsize=11)
    ax.set_ylim(0, entity_total_cores * 1.22) 

    def add_text_on_bar(rects_collection, base_values=None, color='black'):
        if rects_collection is None: return
        for i, rect in enumerate(rects_collection.patches):
            height = rect.get_height()
            current_base = base_values[i] if base_values is not None else 0
            if height > 0.015 * entity_total_cores:
                 ax.text(rect.get_x() + rect.get_width() / 2., current_base + height / 2., f'{height:.2f}',
                         ha='center', va='center', color=color, fontweight='bold', fontsize=10)

    add_text_on_bar(p1, base_values=np.zeros(len(labels)), color='black')
    add_text_on_bar(p2, base_values=vio_data, color='white')
    if p_reserve: add_text_on_bar(p_reserve, base_values=base_reserve, color='black')
    if p_surplus: add_text_on_bar(p_surplus, base_values=base_surplus, color='black')

    surplus_deficit_label_prefix = "FRAME EVACUATION" if is_dc_summary else "EVAC. CONTRIBUTION"

    if actual_headroom >= reserve_target_for_entity_headroom:
        surplus_vs_target = actual_headroom - reserve_target_for_entity_headroom
        status_text = f'{surplus_deficit_label_prefix} SURPLUS ({reserve_target_label_value:.2f} needed): {surplus_vs_target:.2f} Cores'
        status_color = 'darkgreen'
    else:
        deficit_vs_target = reserve_target_for_entity_headroom - actual_headroom
        status_text = f'{surplus_deficit_label_prefix} DEFICIT ({reserve_target_label_value:.2f} needed): {deficit_vs_target:.2f} Cores'
        status_color = 'darkred'
    
    text_y_pos = entity_total_cores + (0.03 * entity_total_cores)
    ax.text(index[0], text_y_pos, status_text,
            ha='center', va='bottom', color=status_color, fontweight='bold', fontsize=12,
            bbox=dict(boxstyle='round,pad=0.5', fc='white', ec=status_color, alpha=0.9))

    handles, legend_labels = ax.get_legend_handles_labels()
    unique_labels = {}
    for handle, label in zip(handles, legend_labels):
        if label not in unique_labels: unique_labels[label] = handle
    ax.legend(unique_labels.values(), unique_labels.keys(), loc='upper left', bbox_to_anchor=(0.01, 0.99), fontsize=9, ncol=1, framealpha=0.95)

    fig.tight_layout(rect=[0, 0, 1, 0.93])
    plt.savefig(output_filename, dpi=300, bbox_inches='tight')
    print(f"Chart saved as {output_filename}")
    plt.close(fig)

# --- Main Execution ---
if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description=f"nFit Capacity Visualisation Script v{SCRIPT_VERSION}. Generates capacity charts based on frame and scenario configurations.",
        formatter_class=argparse.RawTextHelpFormatter # To preserve formatting in help
    )
    parser.add_argument(
        '--mgsys-config',
        help=f"Path to frame configuration file (default search: ./etc/{DEFAULT_FRAME_CONFIG_FILENAME} then ./{DEFAULT_FRAME_CONFIG_FILENAME})"
    )
    parser.add_argument(
        '--scenarios-config',
        help=f"Path to scenario definition file (default search: ./etc/{DEFAULT_SCENARIO_CONFIG_FILENAME} then ./{DEFAULT_SCENARIO_CONFIG_FILENAME})"
    )
    parser.add_argument(
        '--version',
        action='version',
        version=f'%(prog)s {SCRIPT_VERSION}'
    )
    args = parser.parse_args()

    # Determine config file paths
    frame_config_to_use = find_config_file(DEFAULT_FRAME_CONFIG_FILENAME, args.mgsys_config)
    scenario_config_to_use = find_config_file(DEFAULT_SCENARIO_CONFIG_FILENAME, args.scenarios_config)

    if not frame_config_to_use: # find_config_file returns None if default search fails
        print(f"ERROR: Frame configuration file '{args.mgsys_config or DEFAULT_FRAME_CONFIG_FILENAME}' not found in specified or default locations.")
        print(f"Default search order: ./etc/{DEFAULT_FRAME_CONFIG_FILENAME}, then ./{DEFAULT_FRAME_CONFIG_FILENAME}")
        exit(1)
    if not os.path.exists(frame_config_to_use): # Check again if a path was specified but not found
        print(f"ERROR: Specified frame configuration file not found: {frame_config_to_use}")
        exit(1)

    if not scenario_config_to_use:
        print(f"ERROR: Scenario configuration file '{args.scenarios_config or DEFAULT_SCENARIO_CONFIG_FILENAME}' not found in specified or default locations.")
        print(f"Default search order: ./etc/{DEFAULT_SCENARIO_CONFIG_FILENAME}, then ./{DEFAULT_SCENARIO_CONFIG_FILENAME}")
        exit(1)
    if not os.path.exists(scenario_config_to_use):
        print(f"ERROR: Specified scenario configuration file not found: {scenario_config_to_use}")
        exit(1)


    # Load configurations using the determined paths
    # DC_NAME is loaded/updated globally by load_frames_config
    FRAMES_CONFIG = load_frames_config(frame_config_to_use)
    NUM_FRAMES = len(FRAMES_CONFIG) 
    SCENARIOS = load_scenarios_config(scenario_config_to_use, NUM_FRAMES)

    # Recalculate DC-wide totals based on loaded FRAMES_CONFIG
    TOTAL_DC_CAPACITY = sum(f["total_cores"] for f in FRAMES_CONFIG)
    VIO_SERVER_ALLOCATION_TOTAL_DC = sum(f["vio_allocation"] for f in FRAMES_CONFIG)

    output_dir = "./output"
    if not os.path.exists(output_dir):
        try:
            os.makedirs(output_dir)
            print(f"Created {output_dir} directory for output files.")
        except OSError as e:
            print(f"Error creating {output_dir} directory: {e}. Please create it manually or change output_dir.")
            exit(1)

    print(f"Generating charts for '{DC_NAME}' using frame config from: {frame_config_to_use}")
    print(f"Using scenarios from: {scenario_config_to_use}")
    print(f"Total DC Capacity: {TOTAL_DC_CAPACITY:.2f} Cores across {NUM_FRAMES} frames.")
    print(f"Total VIO Allocation (DC-wide): {VIO_SERVER_ALLOCATION_TOTAL_DC:.2f} Cores.")

    for i_scenario, scenario_data in enumerate(SCENARIOS):
        scenario_number_for_filename = i_scenario + 1
        dc_output_filename = os.path.join(output_dir, f"scenario_{scenario_number_for_filename}_DC_SUMMARY_{scenario_data['filename_suffix']}.png")
        
        if len(scenario_data["lpar_entitlements_per_frame"]) != NUM_FRAMES:
            print(f"ERROR: Scenario '{scenario_data['name']}' has incorrect LPAR entitlements count. Skipping.")
            continue
            
        current_total_lpar_entitlements_dc = sum(scenario_data["lpar_entitlements_per_frame"])
        max_lpar_load_on_one_frame_to_evac = 0
        if scenario_data["lpar_entitlements_per_frame"]:
            max_lpar_load_on_one_frame_to_evac = max(scenario_data["lpar_entitlements_per_frame"])
        
        print(f"\nProcessing DC Summary for Scenario: {scenario_data['name']}")
        print(f"  Total LPAR Entitlements (DC): {current_total_lpar_entitlements_dc:.2f}")
        print(f"  Frame Evacuation Target Headroom (DC needs to absorb): {max_lpar_load_on_one_frame_to_evac:.2f}")

        create_capacity_chart(
            chart_title_prefix="DC Summary",
            entity_name=DC_NAME,
            entity_total_cores=TOTAL_DC_CAPACITY,
            entity_vio_allocation=VIO_SERVER_ALLOCATION_TOTAL_DC,
            entity_lpar_entitlement=current_total_lpar_entitlements_dc,
            reserve_target_for_entity_headroom=max_lpar_load_on_one_frame_to_evac,
            reserve_target_label_value=max_lpar_load_on_one_frame_to_evac,
            output_filename=dc_output_filename,
            is_dc_summary=True,
            current_scenario_name_for_title=scenario_data['name'],
            num_dc_frames=NUM_FRAMES,
            total_dc_capacity_val=TOTAL_DC_CAPACITY
        )

        # Per-Frame Detail Charts
        if NUM_FRAMES > 1:
            target_contribution_per_frame = max_lpar_load_on_one_frame_to_evac / (NUM_FRAMES - 1) if (NUM_FRAMES -1) > 0 else max_lpar_load_on_one_frame_to_evac
            print(f"  Target Evacuation Contribution per other frame: {target_contribution_per_frame:.2f}")

            for i_frame, frame_config_item in enumerate(FRAMES_CONFIG):
                frame_name = frame_config_item["name"]
                frame_lpar_entitlement = scenario_data["lpar_entitlements_per_frame"][i_frame]
                frame_output_filename = os.path.join(output_dir, f"scenario_{scenario_number_for_filename}_{frame_name.replace(' ', '_')}_{scenario_data['filename_suffix']}.png")
                
                print(f"  Processing {frame_name} for Scenario: {scenario_data['name']}")
                create_capacity_chart(
                    chart_title_prefix=f"{frame_name}",
                    entity_name=frame_name,
                    entity_total_cores=frame_config_item["total_cores"],
                    entity_vio_allocation=frame_config_item["vio_allocation"],
                    entity_lpar_entitlement=frame_lpar_entitlement,
                    reserve_target_for_entity_headroom=target_contribution_per_frame,
                    reserve_target_label_value=target_contribution_per_frame,
                    output_filename=frame_output_filename,
                    is_dc_summary=False,
                    current_scenario_name_for_title=scenario_data['name'],
                    num_dc_frames=NUM_FRAMES,
                    total_dc_capacity_val=TOTAL_DC_CAPACITY 
                )
    
    print("\nAll scenario charts generated.")

