#
# nFit Business Calendar
# Defines seasonal events for business-cycle aware analysis.
#

[Global]
min_history_days = 21

[black-friday]
model = multiplicative_seasonal
priority = 100
description = "Annual Black Friday / Cyber Monday sales peak."
dates = 2023-11-17:2023-11-24, 2024-11-22:2024-11-29
# --- Statistical Controls for Compounding ---
allow_compounding = true
# This event is high priority; its dampening factor is less aggressive.
interaction_dampening_factor = 0.90
# --- Other Controls ---
volatility_adjustment = true
seasonal_confidence_level = 0.95
min_historical_years = 1
fallback_event = month-end
baseline_period_days = 30

# Defines the profile used to calculate the "extreme peak" for the residual.
# Falls back to absolute peak (-k) if not set.
residual_peak_profile = "-p 99.9 -w 1 --filter-above-perc 70"
# A final, optional safety margin applied after all statistical calculations.
peak_amplification_factor = 1.05

# Month-End (Operational Recency Decay Model)
# ---
# This model is designed to solve the "start-of-month" problem. It provides an
# operational, short-term forecast by anchoring the analysis to the last completed
# month-end peak, ensuring recent low-utilisation days do not dilute the result.
# It does not use historical snapshots for its calculation.
# ---
[month-end-operational]
model                       = recency_decay
priority                    = 10
description                 = "Operational forecast anchored to the last month-end peak."
period                      = monthly
day_of_period               = -1
duration_days               = 7

# --- Compounding Controls ---
# An event that does not use historical data cannot participate in compounding with a model that does.
allow_compounding           = false
interaction_dampening_factor= 0.85

# Month-End (Strategic Multiplicative Model)
# ---
# This demonstrates how to treat a recurring event like month-end as a
# strategic, scaling business event.
#
# THE VALUE OF THIS APPROACH:
# Instead of just looking at the last peak, this model learns the *proportional
# intensity* of your month-end. It answers the question: "Is our month-end
# workload typically 1.5x our normal baseline, or 3.0x?". It then applies
# this learned scaling factor to your *current* baseline. This is extremely
# valuable for long-term planning, as it correctly assumes that if your
# baseline business grows, your month-end peak will also grow proportionally.
#
# To use this model, you must first build a history by running
# `--update-seasonal-snapshot month-end-strategic` on data covering past months.
# ---
[month-end-strategic]
model                       = multiplicative_seasonal
priority                    = 20
description                 = "Strategic forecast for month-end based on its historical scaling factor."
period                      = monthly
day_of_period               = -1
duration_days               = 7

# --- Statistical Controls ---
baseline_period_days        = 16
min_historical_years        = 3
fallback_event              = month-end-operational

# --- Compounding Controls ---
allow_compounding           = true
interaction_dampening_factor= 0.85

# --- Peak Mananagement ---
residual_peak_profile = "-p 99.9 -w 1 --filter-above-perc 70"
peak_amplification_factor = 1.00

[month-end-predictive]
model                 = predictive_peak
priority              = 15
description           = "Predictive forecast for month-end using linear regression and historical data."
period                = monthly
day_of_period         = -1
duration_days         = 7
baseline_period_days  = 16

# --- Statistical Controls for predictive_peak ---
min_historical_peaks  = 3
max_historical_peaks  = 12
confidence_level      = 0.95

# --- Peak Mananagement ---
residual_peak_profile = "-p 99.9 -w 1 --filter-above-perc 70"
peak_amplification_factor = 1.00

[month-end-adaptive]
# --- Model Definition ---
model = adaptive_peak_forecasting
# Tells the adaptive model to use the data captured by the 'month-end-predictive' event.
source_event = month-end-predictive

priority = 20
description = "Advanced adaptive forecast using a multi-model ensemble."

# --- Event Timing ---
# This model requires historical snapshots from another event.
# It does not define its own timing for snapshot creation.

# --- Statistical Controls ---
# Defines the minimum number of historical snapshots required to run a forecast.
#  recommended: min_historical_peaks = 6
min_historical_peaks = 2

# The maximum number of historical snapshots to use (the most recent ones).
#  recommended: max_historical_peaks = 24
max_historical_peaks = 24

# The confidence level for prediction intervals.
# recommended: confidence_level = 0.98
#    For capacity planning, a higher confidence level is statistically appropriate. This creates a wider prediction interval, meaning the PI_Upper value will provide a more conservative "worst-case" scenario for planners to work with.
#  recommended: confidence_level = 0.98
confidence_level = 0.98

# Set to 'false' to disable the Isolation Forest outlier detection step.
outlier_detection = true

# Set to 'false' to disable the PELT regime change detection step.
regime_detection = true

# --- Peak Management ---
# Note: The adaptive_peak_forecasting model doesn't need the residual_peak_profile setting because it is a consumer of data, not a producer of it.
#  recommended: peak_amplification_factor = 1.05
#    After all statistical modeling is complete (including the residual forecast), applying a small, explicit 5% uplift is a sound business practice.
peak_amplification_factor = 1.05
