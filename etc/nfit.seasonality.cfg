#
# nFit Business Calendar
# Defines seasonal events for business-cycle aware analysis.
#

[black-friday]
model = multiplicative_seasonal
priority = 100
description = "Annual Black Friday / Cyber Monday sales peak."
dates = 2023-11-17:2023-11-24, 2024-11-22:2024-11-29
# --- Statistical Controls for Compounding ---
allow_compounding = true
# This event is high priority; its dampening factor is less aggressive.
interaction_dampening_factor = 0.90
# --- Other Controls ---
volatility_adjustment = true
seasonal_confidence_level = 0.95
min_historical_years = 1
fallback_event = month-end
baseline_period_days = 30


# Month-End (Operational Recency Decay Model)
# ---
# This model is designed to solve the "start-of-month" problem. It provides an
# operational, short-term forecast by anchoring the analysis to the last completed
# month-end peak, ensuring recent low-utilisation days do not dilute the result.
# It does not use historical snapshots for its calculation.
# ---
[month-end-operational]
model                       = recency_decay
priority                    = 10
description                 = "Operational forecast anchored to the last month-end peak."
period                      = monthly
day_of_period               = -1
duration_days               = 7

# --- Compounding Controls ---
allow_compounding           = true
interaction_dampening_factor= 0.85

# Month-End (Strategic Multiplicative Model)
# ---
# This demonstrates how to treat a recurring event like month-end as a
# strategic, scaling business event.
#
# THE VALUE OF THIS APPROACH:
# Instead of just looking at the last peak, this model learns the *proportional
# intensity* of your month-end. It answers the question: "Is our month-end
# workload typically 1.5x our normal baseline, or 3.0x?". It then applies
# this learned scaling factor to your *current* baseline. This is extremely
# valuable for long-term planning, as it correctly assumes that if your
# baseline business grows, your month-end peak will also grow proportionally.
#
# To use this model, you must first build a history by running
# `--update-seasonal-snapshot month-end-strategic` on data covering past months.
# ---
[month-end-strategic]
model                       = multiplicative_seasonal
priority                    = 20
description                 = "Strategic forecast for month-end based on its historical scaling factor."
period                      = monthly
day_of_period               = -1
duration_days               = 7

# --- Statistical Controls ---
baseline_period_days        = 21
min_historical_years        = 3
fallback_event              = month-end-operational

# --- Compounding Controls ---
allow_compounding           = true
interaction_dampening_factor= 0.85
