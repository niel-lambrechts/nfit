# ==============================================================================
# nFit Business Calendar - Example Configuration
# ==============================================================================
#
# This file defines the business events and seasonal cycles for your environment.
# The `nfit-profile.pl` script uses this file with the `--apply-seasonality`
# flag to generate context-aware capacity planning forecasts.
#
# Each section header (e.g., [black-friday]) defines a unique seasonal event.
#
# ------------------------------------------------------------------------------
# Key Parameters:
#
# model         : The statistical model to use.
#                 - multiplicative_seasonal: For major business events that scale
#                   proportionally with business growth (e.g., Black Friday).
#                   This is the most powerful model for strategic forecasting.
#                 - recency_decay: For frequent operational cycles (e.g.,
#                   month-end) where the primary goal is to solve the
#                   "start-of-month" problem by anchoring the analysis to the
#                   most recent peak.
#
# description   : A human-readable description of the event.
#
# priority      : A number (higher is more important) used to resolve which
#                 event's characteristics (e.g., volatility) to use when
#                 multiple events overlap.
#
# --- Date Definitions ---
#
# dates         : For events with fixed, non-recurring dates.
#                 Format: YYYY-MM-DD:YYYY-MM-DD. Multiple ranges can be
#                 comma-separated (e.g., for multiple historical years).
#
# period        : For recurring events. Use 'monthly' or 'quarterly'.
# day_of_period : The anchor day for a recurring period. Use -1 for the last
#                 day of the period (e.g., last day of the month).
# duration_days : The length of the peak period, ending on the anchor day.
#
# --- Multiplicative Model Controls ---
#
# baseline_period_days : The number of days immediately preceding the peak
#                        period to use for calculating the baseline performance.
#
# min_historical_years : The minimum number of historical snapshots required
#                        before this model will be used.
#
# fallback_event       : The name of another event to run if the
#                        'min_historical_years' requirement is not met. This
#                        is a crucial resiliency feature.
#
# volatility_adjustment     : (true/false) If true, the forecast will be
#                             adjusted based on the historical year-over-year
#                             volatility of the event's intensity.
#
# seasonal_confidence_level : (0.90, 0.95, 0.98, 0.99) The statistical
#                             confidence level for the volatility buffer.
#
# --- Compounding Controls ---
#
# allow_compounding : (true/false) If true, this event's effects can be
#                     combined with other overlapping events.
#
# interaction_dampening_factor: A multiplier (0.0 to 1.0) to temper this
#                               event's multiplier when it is compounded with
#                               another, to prevent unrealistic forecasts.
#
# ==============================================================================

# ---
# Event 1: Black Friday (Strategic Multiplicative Model)
# ---
# This is the classic use case for the multiplicative model. It is a major
# annual event where demand is expected to scale proportionally with overall
# business growth.
# ---
[black-friday]
model                       = multiplicative_seasonal
priority                    = 100
description                 = "Annual Black Friday / Cyber Monday sales peak."
dates                       = 2023-11-17:2023-11-24, 2024-11-22:2024-11-29

# --- Statistical Controls ---
baseline_period_days        = 30
volatility_adjustment       = true
seasonal_confidence_level   = 0.95
min_historical_years        = 2
# If we have less than 2 years of history, fall back to a simple recency forecast.
fallback_event              = month-end-operational

# --- Compounding Controls ---
allow_compounding           = true
interaction_dampening_factor= 0.90


# ---
# Event 2: Month-End (Tactical Recency Decay Model)
# ---
# This model is designed to solve the "start-of-month" problem. It provides a
# tactical, short-term forecast by anchoring the analysis to the last completed
# month-end peak, ensuring recent low-utilisation days do not dilute the result.
# It does not use historical snapshots for its calculation.
# ---
[month-end-operational]
model                       = recency_decay
priority                    = 10
description                 = "Tactical forecast anchored to the last month-end peak."
period                      = monthly
day_of_period               = -1
duration_days               = 7

# --- Compounding Controls ---
allow_compounding           = true
interaction_dampening_factor= 0.85


# ---
# Event 3: Month-End (Strategic Multiplicative Model)
# ---
# This demonstrates how to treat a recurring event like month-end as a
# strategic, scaling business event.
#
# THE VALUE OF THIS APPROACH:
# Instead of just looking at the last peak, this model learns the *proportional
# intensity* of your month-end. It answers the question: "Is our month-end
# workload typically 1.5x our normal baseline, or 3.0x?". It then applies
# this learned scaling factor to your *current* baseline. This is extremely
# valuable for long-term planning, as it correctly assumes that if your
# baseline business grows, your month-end peak will also grow proportionally.
#
# To use this model, you must first build a history by running
# `--update-seasonal-snapshot month-end-strategic` on data covering past months.
# ---
[month-end-strategic]
model                       = multiplicative_seasonal
priority                    = 20
description                 = "Strategic forecast for month-end based on its historical scaling factor."
period                      = monthly
day_of_period               = -1
duration_days               = 7

# --- Statistical Controls ---
baseline_period_days        = 21
min_historical_years        = 3
fallback_event              = month-end-operational

# --- Compounding Controls ---
allow_compounding           = true
interaction_dampening_factor= 0.85


# ---
# Event 4: Financial Year-End (Multiplicative Model)
# ---
# Another example of a critical, high-impact business event.
# ---
[financial-year-end]
model                       = multiplicative_seasonal
priority                    = 200
description                 = "Critical financial year-end processing."
dates                       = 2024-02-22:2024-02-29, 2025-02-21:2025-02-28

# --- Statistical Controls ---
baseline_period_days        = 30
volatility_adjustment       = true
seasonal_confidence_level   = 0.98
min_historical_years        = 1
# No fallback defined. If history is missing, the script will stop with an error.
# This is a valid choice for critical events where a fallback is not acceptable.

# --- Compounding Controls ---
allow_compounding           = true
interaction_dampening_factor= 0.95


# ---
# Event 5: Christmas Shutdown (Low Season Example)
# ---
# This demonstrates how the model can handle a "low season", where demand is
# expected to be lower than the baseline. The calculated SeasonalMultiplier
# will be less than 1.0, resulting in a correctly reduced forecast.
# ---
[christmas-shutdown]
model                       = multiplicative_seasonal
priority                    = 5
description                 = "Annual Christmas change-freeze and low-utilisation period."
dates                       = 2023-12-22:2024-01-02, 2024-12-20:2025-01-02

# --- Statistical Controls ---
baseline_period_days        = 30
min_historical_years        = 1

# --- Compounding Controls ---
# It is unlikely this event will overlap with a peak, but compounding is enabled.
allow_compounding           = true
interaction_dampening_factor= 1.0 # No dampening needed for a low-season event.
